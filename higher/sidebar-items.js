window.SIDEBAR_ITEMS = {"derive":[["Bifunctor",""],["Functor",""]],"fn":[["repeat","Construct a function that ignores its argument and returns the same value every time you call it."]],"macro":[["run","Monadic do notation."]],"mod":[["algebras",""],["applicative",""],["apply",""],["bifunctor",""],["bind",""],["contra",""],["error",""],["foldable",""],["functor",""],["monad",""],["monoid",""],["profunctor",""],["pure",""],["rings",""],["semigroup",""],["traversable",""]],"trait":[["Applicative","An `Applicative` functor is anything which implements `Functor`, `Apply` and `Pure`."],["ApplicativeError",""],["Apply","`Apply` takes an `F<Fn(A) -> B>` (or, rather, an `F<ApplyFn<'a,A, B>>` specifically) and applies it to an `F<A>` to produce an `F<B>`."],["Bifunctor","A `Bifunctor` lets you change the types of a generic type with two type parameters."],["Bind","`Bind` lets you chain computations together."],["Contravariant","A `Contravariant` functor."],["Foldable",""],["Functor","A `Functor` lets you change the type parameter of a generic type."],["Monad","A `Monad` is like a burrito, and also anything which implements `Bind` and `Applicative`."],["Monoid","A `Monoid` consists of a `Semigroup` and an empty value (the `Default` trait) plus the following laws:"],["Profunctor","A `Profunctor` is just a `Bifunctor` that is contravariant over its first argument and covariant over its second argument. Whatâ€™s the problem?"],["Pure","`Pure` lets you construct a value of type `F<A>` from a single value of `A`."],["Semigroup","A `Semigroup` is a type with an associative operation. In plain terms, this means you can take two values of this type and add them together into a different value of the same type. The most obvious example of this is addition of numbers: `2 + 2 = 4`, another is string concatenation: `\"Hello \" + \"Joe\" = \"Hello Joe\"`."],["Traversable",""]]};